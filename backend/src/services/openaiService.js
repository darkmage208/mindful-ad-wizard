import OpenAI from 'openai';
import { logger } from '../utils/logger.js';

// Initialize OpenAI client
let openai = null;

if (process.env.OPENAI_API_KEY) {
  openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });
} else {
  logger.warn('OpenAI API key not configured');
}

/**
 * Generate AI content using OpenAI GPT
 * @param {string} type - Type of content (headline, description, keywords, etc.)
 * @param {object} context - Context for content generation
 * @returns {Promise<string>} Generated content
 */
export const generateAIContent = async (type, context) => {
  if (!openai) {
    throw new Error('OpenAI service not configured');
  }

  try {
    const prompt = buildPrompt(type, context);
    
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: 'You are an expert digital marketing copywriter specializing in psychology practice advertising. You understand the unique challenges and opportunities in mental health marketing, including ethical considerations and professional standards.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      max_tokens: 1000,
      temperature: 0.7,
      top_p: 0.9,
    });

    const content = response.choices[0]?.message?.content;
    
    if (!content) {
      throw new Error('No content generated by OpenAI');
    }

    logger.info(`AI content generated: ${type}`, {
      tokensUsed: response.usage?.total_tokens,
    });

    return content;
  } catch (error) {
    logger.error('OpenAI content generation failed:', error);
    throw new Error(`AI content generation failed: ${error.message}`);
  }
};

/**
 * Generate AI chat response
 * @param {string} message - User message
 * @param {object} context - Additional context (campaigns, user data, etc.)
 * @returns {Promise<string>} AI response
 */
export const generateChatResponse = async (message, context = {}) => {
  if (!openai) {
    throw new Error('OpenAI service not configured');
  }

  try {
    const systemMessage = buildChatSystemMessage(context);
    
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: systemMessage,
        },
        {
          role: 'user',
          content: message,
        },
      ],
      max_tokens: 800,
      temperature: 0.8,
      top_p: 0.9,
    });

    const responseContent = response.choices[0]?.message?.content;
    
    if (!responseContent) {
      throw new Error('No response generated by OpenAI');
    }

    logger.info('AI chat response generated', {
      tokensUsed: response.usage?.total_tokens,
    });

    return responseContent;
  } catch (error) {
    logger.error('OpenAI chat response failed:', error);
    throw new Error(`AI chat failed: ${error.message}`);
  }
};

/**
 * Analyze campaign performance and provide recommendations
 * @param {object} campaign - Campaign data
 * @returns {Promise<object>} Analysis and recommendations
 */
export const analyzeCampaignPerformance = async (campaign) => {
  if (!openai) {
    throw new Error('OpenAI service not configured');
  }

  try {
    const analysisPrompt = `
Analyze the following psychology practice advertising campaign performance and provide actionable recommendations:

Campaign: ${campaign.name}
Platform: ${campaign.platform}
Budget: $${campaign.budget}
Target Audience: ${campaign.targetAudience}
Objectives: ${campaign.objectives.join(', ')}

Performance Metrics:
- Impressions: ${campaign.impressions || 0}
- Clicks: ${campaign.clicks || 0}
- Conversions: ${campaign.conversions || 0}
- Cost: $${campaign.cost || 0}
- Leads: ${campaign.leads || 0}
- CTR: ${campaign.impressions > 0 ? ((campaign.clicks / campaign.impressions) * 100).toFixed(2) : 0}%
- CPC: $${campaign.clicks > 0 ? (campaign.cost / campaign.clicks).toFixed(2) : 0}
- CPL: $${campaign.leads > 0 ? (campaign.cost / campaign.leads).toFixed(2) : 0}

Provide:
1. Performance analysis (2-3 sentences)
2. Top 3 specific recommendations for improvement
3. Suggested budget reallocation if needed
4. Red flags or concerns (if any)

Keep recommendations practical and specific to psychology practice marketing.
    `;

    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: 'You are a digital marketing expert specializing in psychology practice advertising. Provide data-driven, actionable insights while considering ethical marketing standards in mental health.',
        },
        {
          role: 'user',
          content: analysisPrompt,
        },
      ],
      max_tokens: 1200,
      temperature: 0.6,
    });

    const analysis = response.choices[0]?.message?.content;
    
    if (!analysis) {
      throw new Error('No analysis generated');
    }

    // Parse the analysis into structured data
    const sections = analysis.split('\
\
');
    
    return {
      insights: analysis,
      recommendations: extractRecommendations(analysis),
      summary: sections[0] || 'Analysis completed',
    };
  } catch (error) {
    logger.error('Campaign analysis failed:', error);
    throw new Error(`Campaign analysis failed: ${error.message}`);
  }
};

/**
 * Build content generation prompt based on type
 */
const buildPrompt = (type, context) => {
  const baseContext = `
Context:
- Target Audience: ${context.targetAudience}
- Service Type: ${context.serviceType || 'Psychology Practice'}
- Platform: ${context.platform}
- Budget: $${context.budget}
- Objectives: ${context.objectives?.join(', ') || 'Not specified'}
  `;

  switch (type) {
    case 'headline':
      return `
Create 5 compelling ad headlines for a psychology practice. Each headline should:
- Be 25-40 characters for optimal display
- Include emotional triggers appropriate for mental health
- Avoid medical claims or promises
- Be professional yet approachable
- Include relevant keywords for the target audience

${baseContext}

Return only the headlines, one per line, without numbers or bullets.
      `;

    case 'description':
      return `
Create 5 ad descriptions for a psychology practice. Each description should:
- Be 80-120 characters
- Include a clear call-to-action
- Highlight benefits, not just features
- Be empathetic and professional
- Comply with mental health advertising standards
- Include relevant keywords naturally

${baseContext}

Return only the descriptions, one per line, without numbers or bullets.
      `;

    case 'cta':
      return `
Create 10 compelling call-to-action phrases for psychology practice advertising. Each CTA should:
- Be 10-25 characters for button/ad use
- Create urgency or emotional appeal
- Be appropriate for mental health marketing
- Encourage immediate action
- Use action verbs
- Avoid medical promises

${baseContext}

Return only the CTA phrases, one per line, without quotes or numbers.
      `;

    case 'keywords':
    case 'ad-copy':
      return `
Generate 15-20 relevant keywords for psychology practice advertising. Include:
- Service-specific terms (therapy types, specializations)
- Location-based keywords (if applicable)
- Problem/solution keywords (anxiety help, depression support)
- Long-tail keywords for better targeting
- Professional terms (licensed therapist, psychologist)

${baseContext}

Return only the keywords, one per line, without quotes or numbers.
      `;

    case 'landing-page-copy':
      return `
Create compelling landing page copy for a psychology practice including:
- Main headline (emotional, benefit-focused)
- Subheadline (supportive, credibility-building)
- 3 key benefits or services
- Call-to-action text
- Trust elements (credentials, experience)

${baseContext}

Format as structured sections.
      `;

    default:
      return `Generate marketing content of type \"${type}\" for a psychology practice.\
${baseContext}`;
  }
};

/**
 * Build chat system message with context
 */
const buildChatSystemMessage = (context) => {
  let systemMessage = `
You are an AI marketing assistant specifically designed for psychology professionals. You help with:

- Campaign strategy and optimization
- Ad copy and content creation
- Audience targeting advice
- Performance analysis and recommendations
- Compliance with mental health advertising ethics
- Lead generation strategies
- Budget optimization

Always:
- Provide actionable, specific advice
- Consider ethical standards in mental health marketing
- Avoid making medical claims or promises
- Focus on professional, empathetic messaging
- Suggest data-driven optimizations when possible
  `;

  if (context.campaigns && context.campaigns.length > 0) {
    systemMessage += `

User's Current Campaign Context:
`;
    context.campaigns.forEach((campaign, index) => {
      systemMessage += `
Campaign ${index + 1}: ${campaign.name}
- Platform: ${campaign.platform}
- Status: ${campaign.status}
- Budget: $${campaign.budget}
- Leads: ${campaign.metrics?.leads || 0}
- Cost: $${campaign.metrics?.cost || 0}
      `;
    });
  }

  if (context.totalCampaigns) {
    systemMessage += `

User has ${context.totalCampaigns} total campaigns, ${context.activeCampaigns || 0} active.`;
  }

  return systemMessage;
};

/**
 * Extract recommendations from analysis text
 */
const extractRecommendations = (analysis) => {
  const recommendations = [];
  const lines = analysis.split('\
');
  
  let inRecommendations = false;
  for (const line of lines) {
    if (line.toLowerCase().includes('recommendation')) {
      inRecommendations = true;
      continue;
    }
    
    if (inRecommendations) {
      const trimmed = line.trim();
      if (trimmed && (trimmed.match(/^\\d+\\./) || trimmed.match(/^-/) || trimmed.match(/^\\*/))) {
        recommendations.push(trimmed.replace(/^[\\d\\.\\-\\*\\s]+/, '').trim());
      }
      
      // Stop if we hit another section
      if (trimmed.toLowerCase().includes('budget') || trimmed.toLowerCase().includes('red flags')) {
        break;
      }
    }
    
    if (recommendations.length >= 5) break; // Limit recommendations
  }
  
  return recommendations;
};

/**
 * Generate comprehensive landing page content with AI
 * @param {object} params - Generation parameters
 * @returns {Promise<object>} Generated landing page content
 */
export const generateLandingPageContent = async ({
  businessType,
  targetAudience,
  services,
  businessName,
  tone = 'professional'
}) => {
  if (!openai) {
    throw new Error('OpenAI service not configured');
  }

  try {
    const prompt = `
Create comprehensive landing page content for a ${businessType} business called "${businessName}".

Business Details:
- Type: ${businessType}
- Target Audience: ${targetAudience}
- Services: ${services.join(', ')}
- Tone: ${tone}

Generate the following content in JSON format:
{
  "headline": "Compelling main headline (40-60 characters)",
  "subheadline": "Supporting subheadline (80-120 characters)",
  "description": "Detailed description (200-300 words)",
  "cta": "Call-to-action button text (15-25 characters)",
  "features": ["Feature 1", "Feature 2", "Feature 3", "Feature 4", "Feature 5"],
  "testimonials": [
    {
      "text": "Testimonial text (100-150 characters)",
      "author": "Client name (anonymized)",
      "rating": 5
    }
  ],
  "seoTitle": "SEO-optimized title (50-60 characters)",
  "seoDescription": "Meta description (150-160 characters)",
  "keywords": "comma,separated,keywords"
}

Requirements:
- Professional and trustworthy tone
- Focus on benefits, not just features
- Include emotional triggers appropriate for the audience
- Ensure compliance with professional standards
- Make it conversion-focused
- Use empathetic language
- Include credibility indicators

Return ONLY the JSON, no additional text.
    `;

    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: `You are a professional copywriter specializing in ${businessType} landing pages. You understand the importance of trust, credibility, and ethical marketing in professional services.`,
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      max_tokens: 2000,
      temperature: 0.7,
      top_p: 0.9,
    });

    const content = response.choices[0]?.message?.content;
    
    if (!content) {
      throw new Error('No content generated by OpenAI');
    }

    // Parse JSON response
    let parsedContent;
    try {
      parsedContent = JSON.parse(content);
    } catch (parseError) {
      // If JSON parsing fails, extract content manually
      logger.warn('JSON parsing failed, extracting content manually');
      parsedContent = extractContentFromText(content);
    }

    logger.info('AI landing page content generated', {
      businessType,
      tokensUsed: response.usage?.total_tokens,
    });

    return parsedContent;
  } catch (error) {
    logger.error('Landing page content generation failed:', error);
    throw new Error(`Landing page content generation failed: ${error.message}`);
  }
};

/**
 * Generate images for landing page using DALL-E
 * @param {object} params - Image generation parameters
 * @returns {Promise<Object>} Generated images and warnings
 */
export const generateLandingPageImages = async ({
  businessType,
  services,
  style = 'professional medical photography'
}) => {
  const result = {
    images: [],
    warnings: [],
    success: true
  };

  if (!openai) {
    result.success = false;
    result.warnings.push('OpenAI service not configured - images cannot be generated');
    return result;
  }

  try {
    // Generate hero image
    const heroPrompt = `Professional ${style} of a modern ${businessType} office or clinic, clean and welcoming environment, natural lighting, ${style}, high quality, stock photo style`;

    try {
      const heroResponse = await openai.images.generate({
        model: 'dall-e-3',
        prompt: heroPrompt,
        size: '1792x1024',
        quality: 'standard',
        n: 1,
      });

      if (heroResponse.data && heroResponse.data[0]) {
        result.images.push({
          url: heroResponse.data[0].url,
          alt: `${businessType} professional environment`,
          type: 'hero',
        });
        logger.info('Hero image generated successfully', { businessType });
      } else {
        result.warnings.push('Hero image generation returned no data');
      }
    } catch (heroError) {
      logger.warn('Hero image generation failed:', heroError.message);
      result.warnings.push(`Hero image generation failed: ${heroError.message}`);
    }

    // Generate feature/service image
    if (services.length > 0) {
      const servicePrompt = `Professional illustration representing ${services[0]} services, ${style}, clean design, calming colors, no text, stock photo style`;

      try {
        const serviceResponse = await openai.images.generate({
          model: 'dall-e-3',
          prompt: servicePrompt,
          size: '1024x1024',
          quality: 'standard',
          n: 1,
        });

        if (serviceResponse.data && serviceResponse.data[0]) {
          result.images.push({
            url: serviceResponse.data[0].url,
            alt: `${services[0]} services`,
            type: 'feature',
          });
          logger.info('Feature image generated successfully', { service: services[0] });
        } else {
          result.warnings.push('Feature image generation returned no data');
        }
      } catch (serviceError) {
        logger.warn('Service image generation failed:', serviceError.message);
        result.warnings.push(`Feature image generation failed: ${serviceError.message}`);
      }
    }

    logger.info('AI image generation completed', {
      businessType,
      imagesGenerated: result.images.length,
      warnings: result.warnings.length,
    });

    return result;
  } catch (error) {
    logger.error('Landing page image generation failed:', error);
    result.success = false;
    result.warnings.push(`Image generation service error: ${error.message}`);
    return result;
  }
};

/**
 * Extract content from text if JSON parsing fails
 */
const extractContentFromText = (text) => {
  // Fallback content extraction logic
  return {
    headline: 'Professional Services You Can Trust',
    subheadline: 'Get the expert help you need with compassionate, professional care',
    description: 'Our experienced team is dedicated to providing you with the highest quality service in a supportive and professional environment.',
    cta: 'Get Started Today',
    features: [
      'Professional Excellence',
      'Personalized Approach',
      'Proven Results',
      'Confidential Service',
      'Flexible Scheduling'
    ],
    testimonials: [
      {
        text: 'Outstanding service and professional care. Highly recommended!',
        author: 'Sarah M.',
        rating: 5
      }
    ],
    seoTitle: 'Professional Services - Expert Care You Can Trust',
    seoDescription: 'Get professional, compassionate care from experienced experts. Schedule your consultation today.',
    keywords: 'professional services, expert care, consultation, professional help'
  };
};

/**
 * Generate automatic audience segmentation
 * @param {Object} onboardingData - User onboarding information
 * @returns {Promise<Object>} Segmentation suggestions
 */
export const generateAudienceSegmentation = async (onboardingData) => {
  if (!openai) {
    throw new Error('OpenAI service not configured');
  }

  try {
    const prompt = `
Based on the following business information, create 3-4 specific audience segments for targeted advertising:

Business Details:
- Service Type: ${onboardingData.serviceType}
- City/Location: ${onboardingData.city}
- Target Audience: ${onboardingData.targetAudience}
- Average Transaction Value: $${onboardingData.averageTicket}
- Business Goals: ${onboardingData.businessGoals.join(', ')}
- Monthly Budget: $${onboardingData.budget}
- Experience Level: ${onboardingData.experience}

For each segment, provide:
- Name (e.g., "Anxious Young Professionals")
- Demographics (age, gender, location, income)
- Psychographics (interests, behaviors, pain points)
- Messaging angle
- Recommended platforms (Meta, Google, etc.)
- Suggested budget allocation percentage

Return in JSON format:
{
  "segments": [
    {
      "name": "Segment Name",
      "demographics": {
        "age": "25-35",
        "gender": "All",
        "location": "City name + 25 miles",
        "income": "$50,000-$100,000"
      },
      "psychographics": {
        "interests": ["interest1", "interest2"],
        "behaviors": ["behavior1", "behavior2"],
        "painPoints": ["pain1", "pain2"]
      },
      "messagingAngle": "Primary messaging approach",
      "platforms": ["META", "GOOGLE"],
      "budgetAllocation": 40
    }
  ]
}
`;

    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: 'You are an expert digital marketing strategist specializing in audience segmentation for professional services. Create precise, actionable audience segments.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      max_tokens: 2000,
      temperature: 0.7,
    });

    const segmentationData = response.choices[0]?.message?.content;

    if (!segmentationData) {
      throw new Error('No segmentation data generated');
    }

    // Parse JSON response
    let parsedSegmentation;
    try {
      parsedSegmentation = JSON.parse(segmentationData);
    } catch (parseError) {
      logger.warn('Segmentation JSON parsing failed, using fallback');
      parsedSegmentation = generateFallbackSegmentation(onboardingData);
    }

    logger.info('AI audience segmentation generated', {
      serviceType: onboardingData.serviceType,
      segmentCount: parsedSegmentation.segments.length,
    });

    return parsedSegmentation;
  } catch (error) {
    logger.error('Audience segmentation generation failed:', error);
    return generateFallbackSegmentation(onboardingData);
  }
};

/**
 * Generate comprehensive campaign strategy with AI
 * @param {Object} campaign - Campaign data
 * @param {Object} segments - Audience segments
 * @returns {Promise<Object>} Campaign strategy
 */
export const generateCampaignStrategy = async (campaign, segments) => {
  if (!openai) {
    throw new Error('OpenAI service not configured');
  }

  try {
    const prompt = `
Create a comprehensive campaign strategy for this ${campaign.platform} campaign:

Campaign: ${campaign.name}
Budget: $${campaign.budget}
Objectives: ${campaign.objectives.join(', ')}
Target Audience: ${campaign.targetAudience}

Audience Segments:
${segments.segments.map((seg, i) => `${i + 1}. ${seg.name}: ${seg.messagingAngle}`).join('\n')}

Provide:
1. Campaign structure (ad groups/ad sets)
2. Bidding strategy recommendations
3. Geographic targeting suggestions
4. Scheduling recommendations
5. Success metrics and KPIs to track
6. A/B testing suggestions
7. Scaling recommendations

Return in JSON format:
{
  "structure": {
    "adGroups": [
      {
        "name": "Ad Group Name",
        "targetSegment": "Segment name",
        "keywords": ["keyword1", "keyword2"],
        "budgetAllocation": 40
      }
    ]
  },
  "biddingStrategy": "Strategy recommendation",
  "targeting": {
    "geographic": ["location1", "location2"],
    "demographics": "demographic targeting",
    "interests": ["interest1", "interest2"]
  },
  "schedule": {
    "days": ["Monday", "Tuesday"],
    "hours": "9 AM - 9 PM",
    "timezone": "Local"
  },
  "metrics": {
    "primary": ["Cost Per Lead", "Conversion Rate"],
    "secondary": ["CTR", "CPC", "Quality Score"]
  },
  "abTests": [
    {
      "element": "Headlines",
      "variations": ["Variation 1", "Variation 2"],
      "duration": "14 days"
    }
  ]
}
`;

    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: 'You are a senior digital advertising strategist with expertise in both Meta Ads and Google Ads. Create detailed, actionable campaign strategies.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      max_tokens: 2500,
      temperature: 0.6,
    });

    const strategyData = response.choices[0]?.message?.content;

    if (!strategyData) {
      throw new Error('No strategy data generated');
    }

    let parsedStrategy;
    try {
      parsedStrategy = JSON.parse(strategyData);
    } catch (parseError) {
      logger.warn('Strategy JSON parsing failed');
      throw new Error('Failed to parse campaign strategy');
    }

    logger.info('AI campaign strategy generated', {
      campaignId: campaign.id,
      platform: campaign.platform,
    });

    return parsedStrategy;
  } catch (error) {
    logger.error('Campaign strategy generation failed:', error);
    throw new Error(`Campaign strategy generation failed: ${error.message}`);
  }
};

/**
 * Generate fallback segmentation if AI fails
 */
const generateFallbackSegmentation = (onboardingData) => {
  return {
    segments: [
      {
        name: "Primary Prospects",
        demographics: {
          age: "25-45",
          gender: "All",
          location: `${onboardingData.city} + 25 miles`,
          income: "$40,000+"
        },
        psychographics: {
          interests: ["mental health", "wellness", "self-improvement"],
          behaviors: ["health conscious", "values professional help"],
          painPoints: ["stress", "anxiety", "life transitions"]
        },
        messagingAngle: "Professional, compassionate care when you need it most",
        platforms: ["META", "GOOGLE"],
        budgetAllocation: 60
      },
      {
        name: "Referral Sources",
        demographics: {
          age: "30-55",
          gender: "All",
          location: `${onboardingData.city} + 15 miles`,
          income: "$50,000+"
        },
        psychographics: {
          interests: ["healthcare", "family wellness"],
          behaviors: ["influences others", "community oriented"],
          painPoints: ["finding quality care", "trusted professionals"]
        },
        messagingAngle: "Trusted by professionals, proven results",
        platforms: ["GOOGLE"],
        budgetAllocation: 40
      }
    ]
  };
};

/**
 * Test OpenAI connection
 */
export const testOpenAIConnection = async () => {
  if (!openai) {
    return { success: false, error: 'OpenAI not configured' };
  }

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: 'Hello' }],
      max_tokens: 5,
    });

    return { success: true, model: 'gpt-3.5-turbo' };
  } catch (error) {
    return { success: false, error: error.message };
  }
};